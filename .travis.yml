sudo: true

language: bash

services:
  - docker

env:
  global:
    - DEBIAN_FRONTEND="noninteractive"

jobs:
  include:
    - stage: development
      if: branch = development AND type != pull_request
      script:
        - ./script/build_release dev
      after_failure:
        - ./script/message failure
      deploy:
        - provider: s3
          edge: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $BUCKET_DEV
          local_dir: s3out
          upload-dir: $TRAVIS_COMMIT
          skip_cleanup: true
          on:
            branch: development
      after_deploy:
        - ./script/message dev-push


    - stage: pull-request
      if: type = pull_request
      script:
        - ./script/build_release pr


    - stage: release-candidate
      if: branch = RC AND type != pull_request
      before_install:
        - ./script/pre_install
      script:
        - ./script/build_release rc
        - export RELEASE_TAG=$(cat version.txt)-RC
        - git tag ${RELEASE_TAG}
        - ./script/message rc-push
      after_failure:
        - ./script/message failure
      deploy:
        - provider: s3
          edge: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $BUCKET_LIVE
          local_dir: s3out-latest
          upload-dir: rc
          skip_cleanup: true
          on:
            branch: RC
        - provider: s3
          edge: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $BUCKET_LIVE
          local_dir: s3out
          upload-dir: $RELEASE_TAG
          skip_cleanup: true
          on:
            branch: RC
        - provider: releases
          api_key: $GITHUB_TOKEN
          file_glob: true
          file: githubout/*
          prerelease: true
          skip_cleanup: true
          on:
            branch: RC

    - stage: release
      if: branch = master AND type != pull_request
      before_install:
        - ./script/pre_install
      script:
        - ./script/build_release release
        - export RELEASE_TAG=$(cat version.txt)
        - git tag ${RELEASE_TAG}
      after_failure:
        - ./script/message failure
      deploy:
        - provider: s3
          edge: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $BUCKET_LIVE
          local_dir: s3out-latest
          skip_cleanup: true
          on:
            branch: master
        - provider: s3
          edge: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          bucket: $BUCKET_LIVE
          local_dir: s3out
          upload-dir: $RELEASE_TAG
          skip_cleanup: true
          on:
            branch: master
        - provider: releases
          api_key: $GITHUB_TOKEN
          file_glob: true
          file: githubout/*
          skip_cleanup: true
          on:
            branch: master
      after_deploy:
        - aws configure set preview.cloudfront true
        - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID_BOOT --paths "/*" "/ipxe/*"
        - ./script/message live-push
